// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kubegems/datas/v1/tenant.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tenant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tenant with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TenantMultiError, or nil if none found.
func (m *Tenant) ValidateAll() error {
	return m.validate(true)
}

func (m *Tenant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 32 {
		err := TenantValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Tenant_Name_Pattern.MatchString(m.GetName()) {
		err := TenantValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIntro()) < 5 {
		err := TenantValidationError{
			field:  "Intro",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return TenantMultiError(errors)
	}
	return nil
}

// TenantMultiError is an error wrapping multiple validation errors returned by
// Tenant.ValidateAll() if the designated constraints aren't met.
type TenantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantMultiError) AllErrors() []error { return m }

// TenantValidationError is the validation error returned by Tenant.Validate if
// the designated constraints aren't met.
type TenantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantValidationError) ErrorName() string { return "TenantValidationError" }

// Error satisfies the builtin error interface
func (e TenantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantValidationError{}

var _Tenant_Name_Pattern = regexp.MustCompile("^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$")

// Validate checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantRequestMultiError, or nil if none found.
func (m *CreateTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTenantRequestMultiError(errors)
	}
	return nil
}

// CreateTenantRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantRequestMultiError) AllErrors() []error { return m }

// CreateTenantRequestValidationError is the validation error returned by
// CreateTenantRequest.Validate if the designated constraints aren't met.
type CreateTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantRequestValidationError) ErrorName() string {
	return "CreateTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantRequestValidationError{}

// Validate checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTenantResponseMultiError, or nil if none found.
func (m *CreateTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Succeed

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateTenantResponseMultiError(errors)
	}
	return nil
}

// CreateTenantResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantResponseMultiError) AllErrors() []error { return m }

// CreateTenantResponseValidationError is the validation error returned by
// CreateTenantResponse.Validate if the designated constraints aren't met.
type CreateTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantResponseValidationError) ErrorName() string {
	return "CreateTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantResponseValidationError{}

// Validate checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantRequestMultiError, or nil if none found.
func (m *DeleteTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteTenantRequestMultiError(errors)
	}
	return nil
}

// DeleteTenantRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantRequestMultiError) AllErrors() []error { return m }

// DeleteTenantRequestValidationError is the validation error returned by
// DeleteTenantRequest.Validate if the designated constraints aren't met.
type DeleteTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantRequestValidationError) ErrorName() string {
	return "DeleteTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantRequestValidationError{}

// Validate checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTenantResponseMultiError, or nil if none found.
func (m *DeleteTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Succeed

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteTenantResponseMultiError(errors)
	}
	return nil
}

// DeleteTenantResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTenantResponseMultiError) AllErrors() []error { return m }

// DeleteTenantResponseValidationError is the validation error returned by
// DeleteTenantResponse.Validate if the designated constraints aren't met.
type DeleteTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTenantResponseValidationError) ErrorName() string {
	return "DeleteTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTenantResponseValidationError{}

// Validate checks the field values on ModifyTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyTenantRequestMultiError, or nil if none found.
func (m *ModifyTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := ModifyTenantRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyTenantRequestValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyTenantRequestValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyTenantRequestMultiError(errors)
	}
	return nil
}

// ModifyTenantRequestMultiError is an error wrapping multiple validation
// errors returned by ModifyTenantRequest.ValidateAll() if the designated
// constraints aren't met.
type ModifyTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyTenantRequestMultiError) AllErrors() []error { return m }

// ModifyTenantRequestValidationError is the validation error returned by
// ModifyTenantRequest.Validate if the designated constraints aren't met.
type ModifyTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyTenantRequestValidationError) ErrorName() string {
	return "ModifyTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyTenantRequestValidationError{}

// Validate checks the field values on ModifyTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ModifyTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifyTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifyTenantResponseMultiError, or nil if none found.
func (m *ModifyTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifyTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTenant()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModifyTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModifyTenantResponseValidationError{
					field:  "Tenant",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTenant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModifyTenantResponseValidationError{
				field:  "Tenant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModifyTenantResponseMultiError(errors)
	}
	return nil
}

// ModifyTenantResponseMultiError is an error wrapping multiple validation
// errors returned by ModifyTenantResponse.ValidateAll() if the designated
// constraints aren't met.
type ModifyTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifyTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifyTenantResponseMultiError) AllErrors() []error { return m }

// ModifyTenantResponseValidationError is the validation error returned by
// ModifyTenantResponse.Validate if the designated constraints aren't met.
type ModifyTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyTenantResponseValidationError) ErrorName() string {
	return "ModifyTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyTenantResponseValidationError{}

// Validate checks the field values on ListTenantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTenantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantRequestMultiError, or nil if none found.
func (m *ListTenantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 1 {
		err := ListTenantRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSize() < 1 {
		err := ListTenantRequestValidationError{
			field:  "Size",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Search

	if len(errors) > 0 {
		return ListTenantRequestMultiError(errors)
	}
	return nil
}

// ListTenantRequestMultiError is an error wrapping multiple validation errors
// returned by ListTenantRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTenantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantRequestMultiError) AllErrors() []error { return m }

// ListTenantRequestValidationError is the validation error returned by
// ListTenantRequest.Validate if the designated constraints aren't met.
type ListTenantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantRequestValidationError) ErrorName() string {
	return "ListTenantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantRequestValidationError{}

// Validate checks the field values on ListTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTenantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTenantResponseMultiError, or nil if none found.
func (m *ListTenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Search

	for idx, item := range m.GetTenats() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTenantResponseValidationError{
						field:  fmt.Sprintf("Tenats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTenantResponseValidationError{
						field:  fmt.Sprintf("Tenats[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTenantResponseValidationError{
					field:  fmt.Sprintf("Tenats[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTenantResponseMultiError(errors)
	}
	return nil
}

// ListTenantResponseMultiError is an error wrapping multiple validation errors
// returned by ListTenantResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTenantResponseMultiError) AllErrors() []error { return m }

// ListTenantResponseValidationError is the validation error returned by
// ListTenantResponse.Validate if the designated constraints aren't met.
type ListTenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantResponseValidationError) ErrorName() string {
	return "ListTenantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantResponseValidationError{}

// Validate checks the field values on CreateTenantClusterResourceQuotaRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTenantClusterResourceQuotaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTenantClusterResourceQuotaRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateTenantClusterResourceQuotaRequestMultiError, or nil if none found.
func (m *CreateTenantClusterResourceQuotaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantClusterResourceQuotaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cluster

	// no validation rules for Tenant

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			// no validation rules for Resources[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, CreateTenantClusterResourceQuotaRequestValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, CreateTenantClusterResourceQuotaRequestValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return CreateTenantClusterResourceQuotaRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return CreateTenantClusterResourceQuotaRequestMultiError(errors)
	}
	return nil
}

// CreateTenantClusterResourceQuotaRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateTenantClusterResourceQuotaRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantClusterResourceQuotaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantClusterResourceQuotaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantClusterResourceQuotaRequestMultiError) AllErrors() []error { return m }

// CreateTenantClusterResourceQuotaRequestValidationError is the validation
// error returned by CreateTenantClusterResourceQuotaRequest.Validate if the
// designated constraints aren't met.
type CreateTenantClusterResourceQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantClusterResourceQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantClusterResourceQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantClusterResourceQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantClusterResourceQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantClusterResourceQuotaRequestValidationError) ErrorName() string {
	return "CreateTenantClusterResourceQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantClusterResourceQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantClusterResourceQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantClusterResourceQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantClusterResourceQuotaRequestValidationError{}

// Validate checks the field values on CreateTenantClusterResourceQuotaResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTenantClusterResourceQuotaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateTenantClusterResourceQuotaResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateTenantClusterResourceQuotaResponseMultiError, or nil if none found.
func (m *CreateTenantClusterResourceQuotaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTenantClusterResourceQuotaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateTenantClusterResourceQuotaResponseMultiError(errors)
	}
	return nil
}

// CreateTenantClusterResourceQuotaResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateTenantClusterResourceQuotaResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTenantClusterResourceQuotaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTenantClusterResourceQuotaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTenantClusterResourceQuotaResponseMultiError) AllErrors() []error { return m }

// CreateTenantClusterResourceQuotaResponseValidationError is the validation
// error returned by CreateTenantClusterResourceQuotaResponse.Validate if the
// designated constraints aren't met.
type CreateTenantClusterResourceQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTenantClusterResourceQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTenantClusterResourceQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTenantClusterResourceQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTenantClusterResourceQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTenantClusterResourceQuotaResponseValidationError) ErrorName() string {
	return "CreateTenantClusterResourceQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTenantClusterResourceQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTenantClusterResourceQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTenantClusterResourceQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTenantClusterResourceQuotaResponseValidationError{}
